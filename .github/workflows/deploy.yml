name: Deploy Frontend to Lightsail

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      sha: ${{ github.sha }}

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Instalar lightsailctl din√°micamente desde AWS
      - name: Install lightsailctl
        run: |
          echo "‚¨áÔ∏è Descargando lightsailctl desde AWS..."
          curl -sSL "https://amazonlightsail.com/ls/docs/en_us/articles/amazon-lightsail-install-software" -o page.html
          DOWNLOAD_URL=$(grep -o 'https://[^"]*lightsailctl[^"]*linux-amd64[^"]*' page.html | head -n 1)

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "‚ùå No se encontr√≥ URL de lightsailctl en la p√°gina oficial"
            cat page.html
            exit 1
          fi

          echo "üì• URL encontrada: $DOWNLOAD_URL"
          curl -sSL "$DOWNLOAD_URL" -o lightsailctl
          chmod +x lightsailctl
          sudo mv lightsailctl /usr/local/bin/

          echo "‚úÖ lightsailctl instalado en /usr/local/bin"
          file /usr/local/bin/lightsailctl
          /usr/local/bin/lightsailctl --help || echo "‚ö†Ô∏è lightsailctl responde raro"

      # 4. Construir imagen Docker
      - name: Build Docker image
        run: |
          docker build \
            --build-arg VITE_AP_VERSION="${{ secrets.VITE_AP_VERSION }}" \
            --build-arg VITE_API_SERVICE="${{ secrets.VITE_API_SERVICE }}" \
            --build-arg VITE_FIREBASE_API_KEY="${{ secrets.VITE_FIREBASE_API_KEY }}" \
            --build-arg VITE_FIREBASE_APP_ID="${{ secrets.VITE_FIREBASE_APP_ID }}" \
            --build-arg VITE_FIREBASE_BUCKET="${{ secrets.VITE_FIREBASE_BUCKET }}" \
            --build-arg VITE_FIREBASE_DOMAIN="${{ secrets.VITE_FIREBASE_DOMAIN }}" \
            --build-arg VITE_FIREBASE_MEASURE_ID="${{ secrets.VITE_FIREBASE_MEASURE_ID }}" \
            --build-arg VITE_FIREBASE_MESSAGING_ID="${{ secrets.VITE_FIREBASE_MESSAGING_ID }}" \
            --build-arg VITE_FIREBASE_PROJECT_ID="${{ secrets.VITE_FIREBASE_PROJECT_ID }}" \
            --build-arg VITE_FIREBASE_VAPID_KEY="${{ secrets.VITE_FIREBASE_VAPID_KEY }}" \
            --build-arg VITE_IMPORT_USERS_EXCEL="${{ secrets.VITE_IMPORT_USERS_EXCEL }}" \
            --build-arg VITE_PDF_MANUAL_LINK="${{ secrets.VITE_PDF_MANUAL_LINK }}" \
            -t frontend-app:${{ env.sha }} .

      # 5. Push a Lightsail
      - name: Push Docker image to Lightsail
        id: push
        run: |
          IMAGE="frontend-app:${{ env.sha }}"
          echo "‚è≥ Pushing image: $IMAGE ..."
          RESPONSE=$(aws lightsail push-container-image \
            --service-name ${{ secrets.AWS_SERVICE_NAME }} \
            --label web \
            --region ${{ secrets.AWS_REGION }} \
            --image $IMAGE \
            --output json)

          echo "=== RAW AWS RESPONSE START ==="
          echo "$RESPONSE"
          echo "=== RAW AWS RESPONSE END ==="

          IMAGE_URI=$(echo "$RESPONSE" | jq -r '.containerImage.image')

          if [ -z "$IMAGE_URI" ] || [ "$IMAGE_URI" = "null" ]; then
            echo "‚ùå No se pudo extraer IMAGE_URI"
            exit 1
          fi

          echo "‚úÖ IMAGE_URI=$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # 6. Deploy container
      - name: Deploy to Lightsail
        run: |
          echo "üöÄ Deploying with image: ${IMAGE_URI}"
          aws lightsail create-container-service-deployment \
            --service-name ${{ secrets.AWS_SERVICE_NAME }} \
            --containers "{
              \"frontend\": {
                \"image\": \"${IMAGE_URI}\",
                \"ports\": { \"80\": \"HTTP\" }
              }
            }" \
            --public-endpoint "{
              \"containerName\": \"frontend\",
              \"containerPort\": 80,
              \"healthCheck\": { \"path\": \"/\", \"intervalSeconds\": 10 }
            }"

      # 7. Debug - listar im√°genes disponibles en el servicio
      - name: Debug - List Lightsail container images
        run: |
          echo "üîç Listando im√°genes disponibles en el servicio..."
          aws lightsail get-container-images \
            --service-name ${{ secrets.AWS_SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --output json
